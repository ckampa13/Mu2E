#! /usr/bin/env python
"""Module for fitting magnetic field data with a parametric expression.

This is the main workhorse module for fitting the magnetic field data.  It is assumed that the data
has passed through the :class:`mu2e.dataframeprod.DataFrameMaker`, and thus in the expected format.
In most cases the data has also passed through the :mod:`mu2e.hallprober` module, to imitate the act
of surveying one of the Mu2E solenoids with a series of hall probes.  The
:class:`mu2e.fieldfitter.FieldFitter` preps the data, flattens it into 1D, and uses the :mod:`lmfit`
package extensively for parameter-handling, fitting, optimization, etc.

Example:
    Incomplete excerpt, see :func:`mu2e.hallprober.field_map_analysis` and `scripts/hallprobesim`
    for more typical use cases:

    .. code-block:: python

        # assuming config files already defined...

        In [10]: input_data = DataFileMaker(cfg_data.path, use_pickle=True).data_frame
        ...      input_data.query(' and '.join(cfg_data.conditions))

        In [11]: hpg = HallProbeGenerator(
        ...         input_data, z_steps = cfg_geom.z_steps,
        ...         r_steps = cfg_geom.r_steps, phi_steps = cfg_geom.phi_steps,
        ...         x_steps = cfg_geom.x_steps, y_steps = cfg_geom.y_steps)

        In [12]: ff = FieldFitter(hpg.get_toy(), cfg_geom)

        In [13]: ff.fit(cfg_geom.geom, cfg_params, cfg_pickle)
        ...      # This will take some time, especially for many data points and free params

        In [14]: ff.merge_data_fit_res() # merge the results in for easy plotting

        In [15]: make_fit_plots(ff.input_data, cfg_data, cfg_geom, cfg_plot, name)
        ...      # defined in :class:`mu2e.hallprober`

*2016 Brian Pollack, Northwestern University*

brianleepollack@gmail.com
"""

from __future__ import division
from __future__ import absolute_import
from __future__ import print_function
from six.moves import range
from time import time
import numpy as np
import six.moves.cPickle as pkl
import pandas as pd
from lmfit import Model, Parameters, report_fit
from mu2e import mu2e_ext_path
from mu2e.tools import fit_funcs_redux as ff


class FieldFitter:
    """Input field measurements, perform parametric fit, return relevant quantities.

    The :class:`mu2e.fieldfitter.FieldFitter` takes a 3D set of field measurements and their
    associated position values, and performs a parametric fit.  The parameters and fit model are
    handled by the :mod:`lmfit` package, which in turn wraps the :mod:`scipy.optimize` module, which
    actually performs the parameter optimization.  The default optimizer is the Levenberg-Marquardt
    algorithm.

    The :func:`mu2e.fieldfitter.FieldFitter.fit` requires multiple cfg `namedtuples`, and performs
    the actual fitting (or recreates a fit for a given set of saved parameters).  After fitting, the
    generated class members can be used for further analysis.

    Args:
        input_data (pandas.DataFrame): DF that contains the field component values to be fit.
        cfg_geom (namedtuple): namedtuple with the following members:
            'geom z_steps r_steps phi_steps x_steps y_steps bad_calibration'

    Attributes:
        input_data (pandas.DataFrame): The input DF, with possible modifications.
        phi_steps (List[float]): The axial values of the field data (cylindrial coords)
        r_steps (List[float]): The radial values of the field data (cylindrial coords)
        x_steps (List[float]): The x values of the field data (cartesian coords)
        y_steps (List[float]): The y values of the field data (cartesian coords)
        pickle_path (str): Location to read/write the pickled fit parameter values
        params (lmfit.Parameters): Set of Parameters, inherited from `lmfit`
        result (lmfit.ModelResult): Container for resulting fit information, inherited from `lmfit`

    """
    def __init__(self, input_data, cfg_geom):
        self.input_data = input_data
        if cfg_geom.geom == 'cyl':
            self.phi_steps = cfg_geom.phi_steps
            self.r_steps = cfg_geom.r_steps
        elif cfg_geom.geom == 'cart':
            self.x_steps = cfg_geom.x_steps
            self.y_steps = cfg_geom.y_steps
        self.pickle_path = mu2e_ext_path+'fit_params/'
        self.geom = cfg_geom.geom

    def fit(self, geom, cfg_params, cfg_pickle):
        """Helper function that chooses one of the subsequent fitting functions."""

        self.fit_solenoid(cfg_params, cfg_pickle)

    def fit_solenoid(self, cfg_params, cfg_pickle):
        """Main fitting function for FieldFitter class.

        The typical magnetic field geometry for the Mu2E experiment is determined by one or more
        solenoids, with some contaminating external fields.  The purpose of this function is to fit
        a set of sparse magnetic field data that would, in practice, be generated by a field
        measurement device.

        The following assumptions must hold for the input data:
           * The data is represented in a cylindrical coordiante system.
           * The data forms a series of planes, where all planes intersect at R=0.
           * All planes has the same R and Z values.
           * All positive Phi values have an associated negative phi value, which uniquely defines a
             single plane in R-Z space.

        Args:
           cfg_params (namedtuple): 'ns ms cns cms Reff func_version'
           cfg_pickle (namedtuple): 'use_pickle save_pickle load_name save_name recreate'

        Returns:
            Nothing.  Generates class attributes after fitting, and saves parameter values, if
            saving is specified.
        """
        func_version = cfg_params.func_version
        Bz           = []
        Br           = []
        Bphi         = []
        RR           = []
        ZZ           = []
        PP           = []
        XX           = []
        YY           = []

        # Load pre-defined starting values for parameters, or start a new set
        if cfg_pickle.use_pickle or cfg_pickle.recreate:
            try:
                self.params = pkl.load(open(self.pickle_path+cfg_pickle.load_name+'_results.p',
                                            "rb"))
            except UnicodeDecodeError:
                self.params = pkl.load(open(self.pickle_path+cfg_pickle.load_name+'_results.p',
                                            "rb"), encoding='latin1')
        else:
            self.params = Parameters()
            self.add_params_default(cfg_params)

        ZZ = self.input_data.Z.values
        RR = self.input_data.R.values
        PP = self.input_data.Phi.values
        Bz = self.input_data.Bz.values
        Br = self.input_data.Br.values
        Bphi = self.input_data.Bphi.values
        if func_version in [6, 8, 105, 110, 115, 116, 117, 118, 119, 120, 121]:
            XX = self.input_data.X.values
            YY = self.input_data.Y.values

        # Choose the type of fitting function we'll be using.
        pvd = self.params.valuesdict()  # Quicker way to grab params and init the fit functions

        if func_version == 5:
            fit_func = ff.brzphi_3d_producer_modbessel_phase(ZZ, RR, PP, pvd['R'], pvd['ns'],
                                                             pvd['ms'])
        elif func_version == 6:
            fit_func = ff.brzphi_3d_producer_modbessel_phase_ext(ZZ, RR, PP, pvd['R'], pvd['ns'],
                                                                 pvd['ms'], pvd['cns'],
                                                                 pvd['cms'])
        elif func_version == 7:
            fit_func = ff.brzphi_3d_producer_modbessel_phase_hybrid(ZZ, RR, PP, pvd['R'],
                                                                    pvd['ns'], pvd['ms'],
                                                                    pvd['cns'], pvd['cms'])
        elif func_version == 8:
            fit_func = ff.brzphi_3d_producer_modbessel_v8(ZZ, RR, PP, pvd['R'], pvd['ns'],
                                                          pvd['ms'], pvd['cns'], pvd['cms'])
        elif func_version == 100:
            fit_func = ff.brzphi_3d_producer_hel_v0(ZZ, RR, PP, pvd['R'], pvd['ns'], pvd['ms'])
        elif func_version == 115:
            fit_func = ff.brzphi_3d_producer_hel_v15(ZZ, RR, PP, pvd['R'], pvd['ns'], pvd['ms'],
                                                     pvd['n_scale'])
        elif func_version == 117:
            fit_func = ff.brzphi_3d_producer_hel_v17(ZZ, RR, PP, pvd['R'], pvd['ns'], pvd['ms'],
                                                     pvd['n_scale'])
        elif func_version == 118:
            fit_func = ff.brzphi_3d_producer_hel_v18(ZZ, RR, PP, pvd['R'], pvd['ns'], pvd['ms'],
                                                     pvd['cns'], pvd['cms'], pvd['n_scale'])
        elif func_version == 119:
            fit_func = ff.brzphi_3d_producer_hel_v19(ZZ, RR, PP, pvd['R'], pvd['ns'], pvd['ms'],
                                                     pvd['cns'], pvd['cms'], pvd['n_scale'])
        elif func_version == 120:
            fit_func = ff.brzphi_3d_producer_hel_v20(ZZ, RR, PP, pvd['R'], pvd['ns'], pvd['ms'],
                                                     pvd['cns'], pvd['cms'], pvd['n_scale'],
                                                     pvd['m_scale'])
        elif func_version == 121:
            fit_func = ff.brzphi_3d_producer_hel_v21(ZZ, RR, PP, pvd['R'], pvd['ns'], pvd['ms'],
                                                     pvd['cns'], pvd['cms'], pvd['n_scale'],
                                                     pvd['m_scale'])
        else:
            raise NotImplementedError(f'Function version={func_version} not implemented.')

        # Generate an lmfit Model
        if func_version in [6, 8, 110, 115, 116, 117, 118, 119, 120, 121]:
            self.mod = Model(fit_func, independent_vars=['r', 'z', 'phi', 'x', 'y'])
        else:
            self.mod = Model(fit_func, independent_vars=['r', 'z', 'phi'])

        # Start loading in additional parameters based on the function version.
        # Functions with version < 100 are cyclindrical expansions.
        # Functions with version > 100 are helical expansions.
        if func_version == 5:
            self.add_params_AB()
            self.add_params_phase_shift()

        elif func_version == 6:
            self.add_params_AB()
            self.add_params_phase_shift()
            self.add_params_cart_simple(on_list=['k3'])

        if func_version == 7:
            self.add_params_AB()
            self.add_params_phase_shift()

        elif func_version == 8:
            self.add_params_AB()
            self.add_params_phase_shift()
            self.add_params_cart_simple(on_list=['k3'])
            self.add_params_biot_savart(xyz_tuples=(
                (1000, 0, -4600),
                (1000, 0, 4600)))

        elif func_version == 100:
            self.add_params_ABCD()

        elif func_version == 115:
            self.add_params_AB(skip_zero_n=True)
            self.add_params_cart_simple(all_on=True)

        elif func_version == 116:
            self.add_params_AB(skip_zero_n=True)
            self.add_params_finite_wire()

        elif func_version == 117:
            self.add_params_AB(skip_zero_n=True)
            self.add_params_cart_simple(all_on=True)
            self.add_params_phase_shift()

        elif func_version == 118:
            self.add_params_AB(skip_zero_n=True)
            self.add_params_CD(skip_zero_cn=True)
            self.add_params_cart_simple(all_on=True)

        elif func_version == 119:
            self.add_params_AB(skip_zero_n=True)
            self.add_params_CD(skip_zero_cn=True)
            self.add_params_cart_simple(on_list=['k3'])
            # self.add_params_cart_simple(all_on=False)
            # self.add_params_biot_savart(xyz_tuples=(
            #     (1000, 0, -4600),
            #     (1000, 0, 4600)))
            # self.add_params_biot_savart(xyz_tuples=(
            #     (0.25, 0, -46),
            #     (0.25, 0, 46)),
            #     xy_bounds=0.05, z_bounds=0.05, v_bounds=100)
            # self.add_params_biot_savart(
            #     xyz_tuples=(
            #         # (0, 0, 3532.85),
            #         # (0, 1000, 3963.66),
            #         # (0, 0, 4393.47),
            #         # (0, 0, 5034.67),
            #         # (0, 0, 5691.88),
            #         # (0, 0, 6382.01),
            #         # (0, 0, 7208.56),
            #         # (-100, -100, 7868.01),
            #         # (-500, 1150, 7868.01),
            #         # (-400, 1050, 7868.01),
            #         # (100, 100, 9710.86),
            #         # (-500, 1150, 9710.86),
            #         # (-400, 1050, 9710.86),
            #         # (-200, 1000, 10000),
            #         # (-500, 1150, 11553.71),
            #         # (-400, 1050, 11553.71),
            #         # (-200, 1000, 13454.53),
            #         # (200, -1000, 7868.01),
            #         # (200, -1000, 9710.86),
            #         # (200, -1000, 11553.71),
            #         # (200, -1000, 13454.53),
            #     ),
            #     xy_bounds=500, z_bounds=20, v_bounds=100)

        elif func_version == 120:
            self.add_params_AB(skip_zero_n=False, skip_zero_m=False)
            self.add_params_CD(skip_zero_cn=True)
            self.add_params_cart_simple(on_list=['k3'])
            # self.add_params_cart_simple(all_on=True)
            self.add_params_biot_savart(xyz_tuples=(
                (0.25, 0, -46),
                (0.25, 0, 46)),
                xy_bounds=0.1, z_bounds=0.1, v_bounds=100)

        elif func_version == 121:
            self.add_params_AB(skip_zero_n=False, skip_zero_m=False)
            self.add_params_phase_shift()
            self.add_params_cart_simple(on_list=['k3'])
            # self.add_params_cart_simple(all_on=True)
            self.add_params_biot_savart(xyz_tuples=(
                (0.25, 0, -46),
                (0.25, 0, 46)),
                xy_bounds=0.1, z_bounds=0.1, v_bounds=100)

        if not cfg_pickle.recreate:
            print(f'fitting with func_version={func_version},\n'
                  f'n={cfg_params.ns}, m={cfg_params.ms}, cn={cfg_params.cns}, cm={cfg_params.cms}')
        else:
            print(f'recreating fit with func_version={func_version},\n'
                  f'n={cfg_params.ns}, m={cfg_params.ms}, cn={cfg_params.cns}, cm={cfg_params.cms}')
        start_time = time()

        # Functions with r, z, phi dependence only
        if func_version in [5, 100]:
            if cfg_pickle.recreate:
                for param in self.params:
                    self.params[param].vary = False
                self.result = self.mod.fit(np.concatenate([Br, Bz, Bphi]).ravel(),
                                           r=RR, z=ZZ, phi=PP, params=self.params,
                                           method='leastsq', fit_kws={'maxfev': 1})
            elif cfg_pickle.use_pickle:
                # mag = 1/np.sqrt(Br**2+Bz**2+Bphi**2)
                self.result = self.mod.fit(np.concatenate([Br, Bz, Bphi]).ravel(),
                                           # weights=np.concatenate([mag, mag, mag]).ravel(),
                                           r=RR, z=ZZ, phi=PP, params=self.params,
                                           method='leastsq', fit_kws={'maxfev': 10000})
            else:
                self.result = self.mod.fit(np.concatenate([Br, Bz, Bphi]).ravel(),
                                           # weights=np.concatenate(
                                           #     [np.ones(Br.shape), np.ones(Bz.shape),
                                           #      np.ones(Bphi.shape)*100000]).ravel(),
                                           r=np.abs(RR), z=ZZ, phi=PP, params=self.params,
                                           # method='leastsq', fit_kws={'maxfev': 10000})
                                           method='least_squares', fit_kws={'max_nfev': 100})

        # Functions with r, z, phi, x, y dependence
        elif func_version in [6, 8, 105, 115, 116, 117, 118, 119, 120, 121]:
            if cfg_pickle.recreate:
                for param in self.params:
                    self.params[param].vary = False
                self.result = self.mod.fit(np.concatenate([Br, Bz, Bphi]).ravel(),
                                           r=RR, z=ZZ, phi=PP, x=XX, y=YY, params=self.params,
                                           method='leastsq', fit_kws={'maxfev': 1})
            elif cfg_pickle.use_pickle:
                # mag = 1/np.sqrt(Br**2+Bz**2+Bphi**2)
                self.result = self.mod.fit(np.concatenate([Br, Bz, Bphi]).ravel(),
                                           # weights=np.concatenate([mag, mag, mag]).ravel(),
                                           r=RR, z=ZZ, phi=PP, x=XX, y=YY, params=self.params,
                                           method='leastsq', fit_kws={'maxfev': 10000})
            else:
                # mag = 1/np.sqrt(Br**2+Bz**2+Bphi**2)
                self.result = self.mod.fit(np.concatenate([Br, Bz, Bphi]).ravel(),
                                           # weights=np.concatenate([mag, mag, mag]).ravel(),
                                           r=RR, z=ZZ, phi=PP, x=XX, y=YY, params=self.params,
                                           # method='leastsq', fit_kws={'maxfev': 10000})
                                           method='least_squares', fit_kws={'verbose': 1,
                                                                            'gtol': 1e-15,
                                                                            'ftol': 1e-15,
                                                                            'xtol': 1e-15,
                                                                            # 'tr_solver': 'lsmr',
                                                                            # 'tr_options':
                                                                            # {'regularize': True}
                                                                            })

        self.params = self.result.params
        end_time = time()
        print(("Elapsed time was %g seconds" % (end_time - start_time)))
        report_fit(self.result, show_correl=False)
        if cfg_pickle.save_pickle:  # and not cfg_pickle.recreate:
            self.pickle_results(self.pickle_path+cfg_pickle.save_name)

    def fit_external(self, cfg_params, cfg_pickle, profile=False):
        raise NotImplementedError('Oh no! you got lazy during refactoring')

    def pickle_results(self, pickle_name='default'):
        """Pickle the resulting Parameters after a fit is performed."""

        pkl.dump(self.result.params, open(pickle_name+'_results.p', "wb"), pkl.HIGHEST_PROTOCOL)

    def merge_data_fit_res(self):
        """Combine the fit results and the input data into one dataframe for easier
        comparison of results.

        Adds three columns to input_data: `Br_fit, Bphi_fit, Bz_fit` or `Bx_fit, By_fit, Bz_fit`,
        depending on the geometry.
        """
        bf = self.result.best_fit

        self.input_data.loc[:, 'Br_fit'] = bf[0:len(bf)//3]
        self.input_data.loc[:, 'Bz_fit'] = bf[len(bf)//3:2*len(bf)//3]
        self.input_data.loc[:, 'Bphi_fit'] = bf[2*len(bf)//3:]

    def add_params_default(self, cfg_params):
        if 'R' not in self.params:
            self.params.add('R', value=cfg_params.Reff, vary=False)
        if 'ns' not in self.params:
            self.params.add('ns', value=cfg_params.ns, vary=False)
        if 'ms' not in self.params:
            self.params.add('ms', value=cfg_params.ms, vary=False)
        if 'n_scale' not in self.params:
            self.params.add('n_scale', value=cfg_params.n_scale, vary=False)
        if 'm_scale' not in self.params:
            self.params.add('m_scale', value=cfg_params.m_scale, vary=False)
        if 'cns' not in self.params:
            self.params.add('cns', value=cfg_params.cns, vary=False)
        if 'cms' not in self.params:
            self.params.add('cms', value=cfg_params.cms, vary=False)

    def add_params_AB(self, skip_zero_n=False, skip_zero_m=False):
        if skip_zero_n:
            ns_range = range(1, self.params['ns'].value)
        else:
            ns_range = range(self.params['ns'].value)
        if skip_zero_m:
            ms_range = range(1, self.params['ms'].value)
        else:
            ms_range = range(self.params['ms'].value)

        for n in ns_range:
            for m in ms_range:
                if n == m == 0:
                    if f'A_{n}_{m}' not in self.params:
                        self.params.add(f'A_{n}_{m}', value=0, vary=False)
                    if f'B_{n}_{m}' not in self.params:
                        self.params.add(f'B_{n}_{m}', value=0, vary=False)
                else:
                    if f'A_{n}_{m}' not in self.params:
                        self.params.add(f'A_{n}_{m}', value=0, vary=True)
                    if f'B_{n}_{m}' not in self.params:
                        self.params.add(f'B_{n}_{m}', value=0, vary=True)

    def add_params_CD(self, skip_zero_cn=False):
        if skip_zero_cn:
            cns_range = range(1, self.params['cns'].value)
        else:
            cns_range = range(self.params['cns'].value)
        cms_range = range(self.params['cms'].value)

        for cn in cns_range:
            for cm in cms_range:
                if f'C_{cn}_{cm}' not in self.params:
                    self.params.add(f'C_{cn}_{cm}', value=0, vary=True)
                if f'D_{cn}_{cm}' not in self.params:
                    self.params.add(f'D_{cn}_{cm}', value=0, vary=True)

    def add_params_phase_shift(self):
        # `D` parameter is a scaling parameters that is equivalent to a phase shift.
        # Instead of using a term like cos(phi+D), it is D*cos(phi)+(1-D)*sin(phi).
        # This allows the free paramns to remain linear, and greatly decreases run time.

        for n in range(self.params['ns'].value):
            if f'D_{n}' not in self.params:
                self.params.add(f'D_{n}', value=0.5, min=0, max=1, vary=True)

    def add_params_ABCD(self):
        # Add parameters A,B,C,D, and turn off the off-diagonals that are unphysical.
        ns_range = range(self.params['ns'].value)
        ms_range = range(self.params['ms'].value)
        n_scale = self.params['n_scale'].value
        m_scale = self.params['m_scale'].value

        for n in ns_range:
            for m in ms_range:
                if f'A_{n}_{m}' not in self.params:
                    self.params.add(f'A_{n}_{m}', value=0, vary=True)
                if f'B_{n}_{m}' not in self.params:
                    self.params.add(f'B_{n}_{m}', value=0, vary=True)
                if f'C_{n}_{m}' not in self.params:
                    self.params.add(f'C_{n}_{m}', value=0, vary=True)
                if f'D_{n}_{m}' not in self.params:
                    self.params.add(f'D_{n}_{m}', value=0, vary=True)

                if (n*n_scale > m*m_scale) or n*n_scale == 0:
                    self.params[f'A_{n}_{m}'].vary = False
                    self.params[f'A_{n}_{m}'].value = 0
                    self.params[f'B_{n}_{m}'].vary = False
                    self.params[f'B_{n}_{m}'].value = 0
                    self.params[f'C_{n}_{m}'].vary = False
                    self.params[f'C_{n}_{m}'].value = 0
                    self.params[f'D_{n}_{m}'].vary = False
                    self.params[f'D_{n}_{m}'].value = 0

    def add_params_cart_simple(self, all_on=False, on_list=None):
        cart_names = [f'k{i}' for i in range(1, 11)]
        if on_list is None:
            on_list = []

        for k in cart_names:
            if all_on:
                if k not in self.params:
                    self.params.add(k, value=0, vary=True)
            else:
                if k not in self.params:
                    self.params.add(k, value=0, vary=(k in on_list))

    def add_params_finite_wire(self):
        if 'k1' not in self.params:
            self.params.add('k1', value=0, vary=True)
        if 'k2' not in self.params:
            self.params.add('k2', value=0, vary=True)
        if 'xp1' not in self.params:
            self.params.add('xp1', value=1050, vary=False, min=900, max=1200)
        if 'xp2' not in self.params:
            self.params.add('xp2', value=1050, vary=False, min=900, max=1200)
        if 'yp1' not in self.params:
            self.params.add('yp1', value=0, vary=False, min=-100, max=100)
        if 'yp2' not in self.params:
            self.params.add('yp2', value=0, vary=False, min=-100, max=100)
        if 'zp1' not in self.params:
            self.params.add('zp1', value=4575, vary=False, min=4300, max=4700)
        if 'zp2' not in self.params:
            self.params.add('zp2', value=-4575, vary=False, min=-4700, max=-4300)

    def add_params_biot_savart(self, xyz_tuples=None, v_tuples=None, xy_bounds=100, z_bounds=100,
                               v_bounds=100):
        if v_tuples and len(v_tuples) != len(xyz_tuples):
            raise AttributeError('If v_tuples is specified it must be same size as xyz_tuples')

        for i in range(1, len(xyz_tuples)+1):
            x, y, z = xyz_tuples[i-1]
            if f'x{i}' not in self.params:
                self.params.add(f'x{i}', value=x, vary=True,
                                min=x-xy_bounds, max=x+xy_bounds)
            if f'y{i}' not in self.params:
                self.params.add(f'y{i}', value=y, vary=True,
                                min=y-xy_bounds, max=y+xy_bounds)
            if f'z{i}' not in self.params:
                self.params.add(f'z{i}', value=z, vary=True,
                                min=z-z_bounds, max=z+z_bounds)

            if v_tuples:
                vx, vy, vz = v_tuples[i-1]
            else:
                vx = vy = vz = 0
            if f'vx{i}' not in self.params:
                self.params.add(f'vx{i}', value=vx, vary=True,
                                min=vx-v_bounds, max=vx+v_bounds)
            if f'vy{i}' not in self.params:
                self.params.add(f'vy{i}', value=vy, vary=True,
                                min=vy-v_bounds, max=vy+v_bounds)
            if f'vz{i}' not in self.params:
                self.params.add(f'vz{i}', value=vz, vary=True,
                                min=vz-v_bounds, max=vz+v_bounds)
